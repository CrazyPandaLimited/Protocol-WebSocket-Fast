MODULE = Protocol::WebSocket::XS                PACKAGE = Protocol::WebSocket::XS::HTTPPacket
PROTOTYPES: DISABLE

void HTTPPacket::init (Hash params) {
    Scalar val;
    if ((val = params.fetch("headers"))) http_packet_set_headers(THIS, xs::in<Hash>(val));
    if ((val = params.fetch("body")))    http_packet_set_body(THIS, val);
}

string HTTPPacket::error () {
    RETVAL = THIS->error;
    if (!RETVAL) XSRETURN_UNDEF;
}

bool HTTPPacket::header_ok ()

size_t HTTPPacket::content_length ()

Hash HTTPPacket::headers (Hash new_headers = Hash()) {
    if (new_headers) {
        http_packet_set_headers(THIS, new_headers);
        XSRETURN_UNDEF;
    }

    RETVAL = Hash::create(THIS->headers.size());
    for (const auto& elem : THIS->headers.fields) {
        auto len = elem.name.length();
        char key[len];
        std::transform(elem.name.data(), elem.name.data() + len, key, ::tolower);
        RETVAL.store(string_view(key, len), xs::out(elem.value));
    }
}

string HTTPPacket::header (string_view name, SV* val = NULL) {
    if (val) {
        string value = xs::in<string>(val);
        THIS->headers.set_field(name, value);
        XSRETURN_UNDEF;
    }

    if (!THIS->headers.has_field(name)) XSRETURN_UNDEF;
    RETVAL = THIS->headers.get_field(name);
}

Simple HTTPPacket::body (SV* newval = NULL) {
    if (newval) {
        http_packet_set_body(THIS, newval);
        XSRETURN_UNDEF;
    }
    RETVAL = strings_to_sv(THIS->body->parts);
}

void HTTPPacket::clear ()
