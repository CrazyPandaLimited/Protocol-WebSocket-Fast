MODULE = Protocol::WebSocket::XS                PACKAGE = Protocol::WebSocket::XS::ConnectRequest
PROTOTYPES: DISABLE

BOOT {
    Stash(__PACKAGE__).inherit("Protocol::HTTP::Request");
}

Object new (SV* CLASS, Hash params = Hash()) {
    RETVAL = xs::out(new ConnectRequest(), CLASS);
    if (params) RETVAL.call<void>("init", ST(1));
}

void ConnectRequest::init (Hash params) {
    Scalar val;
    
    if ((val = params.fetch("ws_key")))      THIS->ws_key      = xs::in<string>(val);
    if ((val = params.fetch("ws_version")))  THIS->ws_version  = SvIV(val);
    if ((val = params.fetch("ws_protocol"))) THIS->ws_protocol = xs::in<string>(val);
    
    if ((val = params.fetch("ws_extensions"))) {
        auto exts_av = xs::in<Array>(val);
        HeaderValues exts;
        if (exts_av) av_to_header_values(exts_av, &exts);
        THIS->ws_extensions(exts);
    }
    
    Object(ST(0)).call_super(cv, &ST(1), items-1);
}

string ConnectRequest::ws_key (SV* newval = NULL) {
    if (newval) {
        THIS->ws_key = xs::in<string>(newval);
        XSRETURN_UNDEF;
    }
    RETVAL = THIS->ws_key;
}

int ConnectRequest::ws_version (SV* newval = NULL) {
    if (newval) {
        THIS->ws_version = SvIV(newval);
        XSRETURN_UNDEF;
    }
    RETVAL = THIS->ws_version;
}

Array ConnectRequest::ws_extensions (Array exts_av = Array()) {
    if (exts_av) {
        HeaderValues exts;
        av_to_header_values(exts_av, &exts);
        THIS->ws_extensions(exts);
        XSRETURN_UNDEF;
    }
    
    RETVAL = header_values_to_av(THIS->ws_extensions());
}

string ConnectRequest::ws_protocol (SV* newval = NULL) {
    if (newval) {
        THIS->ws_protocol = xs::in<string>(newval);
        XSRETURN_UNDEF;
    }
    RETVAL = THIS->ws_protocol;
}

bool ConnectRequest::ws_version_supported ()

string ConnectRequest::error () {
    RETVAL = THIS->error;
    if (!RETVAL) XSRETURN_UNDEF;
}
