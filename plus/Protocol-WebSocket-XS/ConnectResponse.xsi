MODULE = Protocol::WebSocket::XS                PACKAGE = Protocol::WebSocket::XS::ConnectResponse
PROTOTYPES: DISABLE

BOOT {
    Stash(__PACKAGE__).inherit("Protocol::WebSocket::XS::HTTPResponse");
}

Object new (SV* CLASS, Hash params = Hash()) {
    RETVAL = xs::out(new ConnectResponse(), CLASS);
    if (params) RETVAL.call<void>("init", ST(1));
}

void ConnectResponse::init (Hash params) {
    Scalar val;
    
    if ((val = params.fetch("ws_extensions"))) {
        HTTPPacket::HeaderValues exts;
        av_to_header_values(aTHX_ xs::in<Array>(val), &exts);
        THIS->ws_extensions(exts);
    }
    
    if ((val = params.fetch("ws_protocol"))) THIS->ws_protocol = xs::in<string>(aTHX_ val);
    
    Object(ST(0)).call_super(cv, &ST(1), items-1);
}

string ConnectResponse::ws_accept_key ()

string ConnectResponse::ws_versions ()

Array ConnectResponse::ws_extensions (Array exts_av = Array()) {
    if (exts_av) {
        HTTPPacket::HeaderValues exts;
        av_to_header_values(aTHX_ exts_av, &exts);
        THIS->ws_extensions(exts);
        XSRETURN_UNDEF;
    }
    
    RETVAL = header_values_to_av(aTHX_ THIS->ws_extensions());
}

string ConnectResponse::ws_protocol (SV* newval = NULL) {
    if (newval) {
        THIS->ws_protocol = xs::in<string>(aTHX_ newval);
        XSRETURN_UNDEF;
    }
    RETVAL = THIS->ws_protocol;
}
