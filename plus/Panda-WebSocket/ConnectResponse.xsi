MODULE = Panda::WebSocket                PACKAGE = Panda::WebSocket::ConnectResponse
PROTOTYPES: DISABLE

BOOT {
    Stash connect_response_stash("Panda::WebSocket::ConnectResponse");
    connect_response_stash.mark_as_loaded(main_stash);
    connect_response_stash.inherit(http_response_stash);
}

Object new (SV* CLASS, Hash params = Hash()) {
    auto res = new ConnectResponse();
    RETVAL = xs::out<ConnectResponseSP>(res, Stash::from_name(CLASS).bless());
    if (params) RETVAL.call("init", ST(1));
}

void init (ConnectResponseSP THIS, Hash params) {
    Scalar val;
    
    if ((val = params.fetch("ws_extensions"))) {
        HTTPPacket::HeaderValues exts;
        av_to_header_values(aTHX_ xs::in<Array>(val), &exts);
        THIS->ws_extensions(exts);
    }
    
    if ((val = params.fetch("ws_protocol"))) THIS->ws_protocol = xs::in<string>(aTHX_ val);
    
    Object(ST(0)).call_super(cv, &ST(1), items-1);
}

string ws_accept_key (ConnectResponseSP THIS) {
    RETVAL = THIS->ws_accept_key();
}

string ws_versions (ConnectResponseSP THIS) {
    RETVAL = THIS->ws_versions();
}

Array ws_extensions (ConnectResponseSP THIS, Array exts_av = Array()) {
    if (exts_av) {
        HTTPPacket::HeaderValues exts;
        av_to_header_values(aTHX_ exts_av, &exts);
        THIS->ws_extensions(exts);
        XSRETURN_UNDEF;
    }
    
    RETVAL = header_values_to_av(aTHX_ THIS->ws_extensions());
}

string ws_protocol (ConnectResponseSP THIS, SV* newval = NULL) {
    if (newval) {
        THIS->ws_protocol = xs::in<string>(aTHX_ newval);
        XSRETURN_UNDEF;
    }
    RETVAL = THIS->ws_protocol;
}
