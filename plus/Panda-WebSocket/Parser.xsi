MODULE = Panda::WebSocket                PACKAGE = Panda::WebSocket::Parser
PROTOTYPES: DISABLE

BOOT {
    xs::register_package("Panda::WebSocket::Parser", "Panda::WebSocket");
}

size_t panda::websocket::Parser::max_frame_size (SV* newval = NULL) {
    if (newval) THIS->max_frame_size = SvUV(newval);
    RETVAL = THIS->max_frame_size;
}

size_t panda::websocket::Parser::max_message_size (SV* newval = NULL) {
    if (newval) THIS->max_message_size = SvUV(newval);
    RETVAL = THIS->max_message_size;
}

bool panda::websocket::Parser::established ()

bool panda::websocket::Parser::recv_closed ()

bool panda::websocket::Parser::send_closed ()

void panda::websocket::Parser::get_frames (string buf = string()) {
    PXS_TRY({
        auto frames = buf ? THIS->get_frames(buf) : THIS->get_frames();
        if (GIMME_V == G_ARRAY) {
            for (auto frame : frames) {
                auto frame_sv = typemap_outcast<panda::websocket::FrameSP, const char* CLASS>(frame, "Panda::WebSocket::Frame");
                mXPUSHs(frame_sv);
            }
        } else {
            if (frames.begin() == frames.end()) XSRETURN_UNDEF;
            auto itsv = typemap_outcast<xs::websocket::XSFrameIterator*, const char* CLASS>(new XSFrameIterator(frames.begin()), "Panda::WebSocket::FrameIterator");
            mPUSHs(itsv);
        }
    });
}

void panda::websocket::Parser::get_messages (string buf = string()) {
    PXS_TRY({
        auto messages = buf ? THIS->get_messages(buf) : THIS->get_messages();
        if (GIMME_V == G_ARRAY) {
            for (auto message : messages) {
                auto message_sv = typemap_outcast<panda::websocket::MessageSP, const char* CLASS>(message, "Panda::WebSocket::Message");
                mXPUSHs(message_sv);
            }
        } else {
            if (messages.begin() == messages.end()) XSRETURN_UNDEF;
            auto itsv = typemap_outcast<xs::websocket::XSMessageIterator*, const char* CLASS>(new XSMessageIterator(messages.begin()), "Panda::WebSocket::MessageIterator");
            mPUSHs(itsv);
        }
    });
}

SV* panda::websocket::Parser::send_frame (bool final, string payload, int opcode = (int)Opcode::BINARY) {
    PXS_TRY({
        auto range = THIS->send_frame(final, payload, (Opcode)opcode);
        RETVAL = strings_to_sv(aTHX_ range);
    });
}

SV* panda::websocket::Parser::send_frame_av (bool final, AV* payload, int opcode = (int)Opcode::BINARY) {
    std::vector<string> list;
    av_to_vstring(payload, list);
    PXS_TRY({
        auto range = THIS->send_frame(final, list.begin(), list.end(), (Opcode)opcode);
        RETVAL = strings_to_sv(aTHX_ range);
    });
}

SV* panda::websocket::Parser::send_control (int opcode, string payload = string()) {
    PXS_TRY({
        auto range = THIS->send_control((Opcode)opcode, payload);
        RETVAL = strings_to_sv(aTHX_ range);
    });
}

SV* panda::websocket::Parser::send_ping (string payload = string()) {
    PXS_TRY({
        auto range = THIS->send_ping(payload);
        RETVAL = strings_to_sv(aTHX_ range);
    });
}

SV* panda::websocket::Parser::send_pong (string payload = string()) {
    PXS_TRY({
        auto range = THIS->send_pong(payload);
        RETVAL = strings_to_sv(aTHX_ range);
    });
}

SV* panda::websocket::Parser::send_close (SV* code = NULL, string message = string()) {
    PXS_TRY({
        if (code) {
            auto range = THIS->send_close((uint16_t)SvUV(code), message);
            RETVAL = strings_to_sv(aTHX_ range);
        } else {
            string ret = THIS->send_close();
            RETVAL = newSVpvn(ret.data(), ret.length());
        }
    });
}

SV* panda::websocket::Parser::send_message (string payload, int opcode = (int)Opcode::BINARY) {
    PXS_TRY({
        auto range = THIS->send_message(payload, (Opcode)opcode);
        RETVAL = strings_to_sv(aTHX_ range);
    });
}

SV* panda::websocket::Parser::send_message_av (AV* payload, int opcode = (int)Opcode::BINARY) {
    std::vector<string> list;
    av_to_vstring(payload, list);
    PXS_TRY({
        auto range = THIS->send_message(list.begin(), list.end(), (Opcode)opcode);
        RETVAL = strings_to_sv(aTHX_ range);
    });
}

SV* panda::websocket::Parser::send_message_multiframe (AV* payloads, int opcode = (int)Opcode::BINARY) {
    std::vector<std::vector<string>> cont;
    XS_AV_ITER_NU(payloads, {
        std::vector<string> tmp;
        tmp.push_back(sv2string(aTHX_ elem));
        cont.push_back(std::move(tmp));
    });
    PXS_TRY({
        auto range = THIS->send_message(cont.begin(), cont.end(), (Opcode)opcode);
        RETVAL = strings_to_sv(aTHX_ range);
    });
}

void panda::websocket::Parser::reset ()

void panda::websocket::Parser::DESTROY () {}

int panda::websocket::Parser::test_parse_frame (string buf) {
    int cnt = 0;
    for (int i = 0; i < 1000; ++i) {
        auto it = THIS->get_frames(buf);
        for (const auto& f : it) cnt++;
    }
    RETVAL = cnt;
}

int panda::websocket::Parser::test_send_frame (string pl) {
    int cnt = 0;
    for (int i = 0; i < 1000; ++i) {
        auto range = THIS->send_frame(1, pl);
        for (const string& s : range) cnt += s.length();
    }
    RETVAL = cnt;
}

