MODULE = Panda::WebSocket                PACKAGE = Panda::WebSocket::Parser
PROTOTYPES: DISABLE

BOOT {
    xs::register_package("Panda::WebSocket::Parser", "Panda::WebSocket");
}

size_t panda::websocket::Parser::max_frame_size (SV* newval = NULL) {
    if (newval) THIS->max_frame_size = SvUV(newval);
    RETVAL = THIS->max_frame_size;
}

size_t panda::websocket::Parser::max_message_size (SV* newval = NULL) {
    if (newval) THIS->max_message_size = SvUV(newval);
    RETVAL = THIS->max_message_size;
}

bool panda::websocket::Parser::established ()

bool panda::websocket::Parser::recv_closed ()

bool panda::websocket::Parser::send_closed ()

void panda::websocket::Parser::get_frames (SV* bufsv = NULL) {
    PXS_TRY({
        string buf;
        if (bufsv) buf = sv2string(aTHX_ bufsv); // need to copy bufsv because parser may save string inside (if partial content)
        auto frames = bufsv ? THIS->get_frames(buf) : THIS->get_frames();
        if (GIMME_V == G_ARRAY) {
            for (auto frame : frames) {
                auto frame_sv = typemap_outcast<panda::websocket::FrameSP, const char* CLASS>(frame, "Panda::WebSocket::Frame");
                mXPUSHs(frame_sv);
            }
        } else {
            if (frames.begin() == frames.end()) XSRETURN_UNDEF;
            auto itsv = typemap_outcast<xs::websocket::XSFrameIterator*, const char* CLASS>(new XSFrameIterator(frames.begin()), "Panda::WebSocket::FrameIterator");
            mPUSHs(itsv);
        }
    });
}

void panda::websocket::Parser::get_messages (SV* bufsv = NULL) {
    PXS_TRY({
        string buf;
        if (bufsv) buf = sv2string(aTHX_ bufsv); // need to copy bufsv because parser may save string inside (if partial content)
        auto messages = bufsv ? THIS->get_messages(buf) : THIS->get_messages();
        if (GIMME_V == G_ARRAY) {
            for (auto message : messages) {
                auto message_sv = typemap_outcast<panda::websocket::MessageSP, const char* CLASS>(message, "Panda::WebSocket::Message");
                mXPUSHs(message_sv);
            }
        } else {
            if (messages.begin() == messages.end()) XSRETURN_UNDEF;
            auto itsv = typemap_outcast<xs::websocket::XSMessageIterator*, const char* CLASS>(new XSMessageIterator(messages.begin()), "Panda::WebSocket::MessageIterator");
            mPUSHs(itsv);
        }
    });
}

SV* panda::websocket::Parser::send_frame (bool final, SV* plsv, int opcode = Frame::BINARY) {
    PXS_TRY({
        std::deque<string> payload;
        if (SvOK(plsv)) payload.push_back(sv2string(aTHX_ plsv));
        THIS->send_frame(final, payload, (Frame::Opcode)opcode);
        RETVAL = strings_to_sv(payload);
    });
}

string panda::websocket::Parser::send_control (int opcode, SV* payload = NULL) {
    PXS_TRY({
        RETVAL = (payload && SvOK(payload)) ? THIS->send_control((Frame::Opcode)opcode, sv2string(aTHX_ payload)) :
                                              THIS->send_control((Frame::Opcode)opcode);
    });
}

string panda::websocket::Parser::send_ping (SV* payload = NULL) {
    PXS_TRY({
        RETVAL = (payload && SvOK(payload)) ? THIS->send_ping(sv2string(aTHX_ payload)) :
                                              THIS->send_ping();
    });
}

string panda::websocket::Parser::send_pong (SV* payload = NULL) {
    PXS_TRY({
        RETVAL = (payload && SvOK(payload)) ? THIS->send_pong(sv2string(aTHX_ payload)) :
                                              THIS->send_pong();
    });
}

string panda::websocket::Parser::send_close (SV* code = NULL, SV* message = NULL) {
    PXS_TRY({
        RETVAL = code ? THIS->send_close((uint16_t)SvUV(code), message ? sv2string(aTHX_ message) : string()) :
                        THIS->send_close();
    });
}

void panda::websocket::Parser::reset ()

void panda::websocket::Parser::DESTROY () {}