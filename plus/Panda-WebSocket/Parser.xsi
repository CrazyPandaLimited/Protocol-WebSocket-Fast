MODULE = Panda::WebSocket                PACKAGE = Panda::WebSocket::Parser
PROTOTYPES: DISABLE

BOOT {
    xs::register_package("Panda::WebSocket::Parser", "Panda::WebSocket");
}

size_t panda::websocket::Parser::max_frame_size (SV* newval = NULL) {
    if (newval) THIS->max_frame_size = SvUV(newval);
    RETVAL = THIS->max_frame_size;
}

size_t panda::websocket::Parser::max_message_size (SV* newval = NULL) {
    if (newval) THIS->max_message_size = SvUV(newval);
    RETVAL = THIS->max_message_size;
}

bool panda::websocket::Parser::established ()

bool panda::websocket::Parser::recv_closed ()

bool panda::websocket::Parser::send_closed ()

void panda::websocket::Parser::get_frames (string buf = string()) {
    PXS_TRY({
        auto frames = buf ? THIS->get_frames(buf) : THIS->get_frames();
        if (GIMME_V == G_ARRAY) {
            for (auto frame : frames) {
                auto frame_sv = typemap_outcast<panda::websocket::FrameSP, const char* CLASS>(frame, "Panda::WebSocket::Frame");
                mXPUSHs(frame_sv);
            }
        } else {
            if (frames.begin() == frames.end()) XSRETURN_UNDEF;
            auto itsv = typemap_outcast<xs::websocket::XSFrameIterator*, const char* CLASS>(new XSFrameIterator(frames.begin()), "Panda::WebSocket::FrameIterator");
            mPUSHs(itsv);
        }
    });
}

void panda::websocket::Parser::get_messages (string buf = string()) {
    PXS_TRY({
        auto messages = buf ? THIS->get_messages(buf) : THIS->get_messages();
        if (GIMME_V == G_ARRAY) {
            for (auto message : messages) {
                auto message_sv = typemap_outcast<panda::websocket::MessageSP, const char* CLASS>(message, "Panda::WebSocket::Message");
                mXPUSHs(message_sv);
            }
        } else {
            if (messages.begin() == messages.end()) XSRETURN_UNDEF;
            auto itsv = typemap_outcast<xs::websocket::XSMessageIterator*, const char* CLASS>(new XSMessageIterator(messages.begin()), "Panda::WebSocket::MessageIterator");
            mPUSHs(itsv);
        }
    });
}

SV* panda::websocket::Parser::send_frame (bool final, string payload, int opcode = (int)Opcode::BINARY) {
    PXS_TRY({
        string pre = THIS->send_frame(final, payload, (Opcode)opcode);
        RETVAL = strings_to_sv(pre, payload);
    });
}

SV* panda::websocket::Parser::send_control (int opcode, string payload = string()) {
    PXS_TRY({
        string pre = THIS->send_control((Opcode)opcode, payload);
        RETVAL = strings_to_sv(pre, payload);
    });
}

SV* panda::websocket::Parser::send_ping (string payload = string()) {
    PXS_TRY({
        string pre = THIS->send_ping(payload);
        RETVAL = strings_to_sv(pre, payload);
    });
}

SV* panda::websocket::Parser::send_pong (string payload = string()) {
    PXS_TRY({
        string pre = THIS->send_pong(payload);
        RETVAL = strings_to_sv(pre, payload);
    });
}

string panda::websocket::Parser::send_close (SV* code = NULL, string message = string()) {
    PXS_TRY({
        RETVAL = code ? THIS->send_close((uint16_t)SvUV(code), message) :
                        THIS->send_close();
    });
}

void panda::websocket::Parser::reset ()

void panda::websocket::Parser::DESTROY () {}

int panda::websocket::Parser::test_parse_frame (string buf) {
    int cnt = 0;
    for (int i = 0; i < 1000; ++i) {
        auto it = THIS->get_frames(buf);
        for (const auto& f : it) cnt++;
    }
    RETVAL = cnt;
}

int panda::websocket::Parser::test_send_frame (string pl) {
    int cnt = 0;
    for (int i = 0; i < 1000; ++i) {
        string pre = THIS->send_frame(1, pl);
        cnt += pre.length();
        cnt += pl.length();
    }
    RETVAL = cnt;
}

