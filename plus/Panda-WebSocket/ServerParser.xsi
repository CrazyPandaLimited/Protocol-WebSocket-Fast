MODULE = Panda::WebSocket                PACKAGE = Panda::WebSocket::ServerParser
PROTOTYPES: DISABLE

BOOT {
    xs::register_package(aTHX_ "Panda::WebSocket::ServerParser", "Panda::WebSocket");
    xs::inherit_package(aTHX_ "Panda::WebSocket::ServerParser", "Panda::WebSocket::Parser");
}

panda::websocket::ServerParser* panda::websocket::ServerParser::new () {
    RETVAL = new ServerParser();
}

size_t panda::websocket::ServerParser::max_handshake_size (SV* newval = NULL) {
    if (newval) THIS->max_handshake_size = SvUV(newval);
    RETVAL = THIS->max_handshake_size;
}

bool panda::websocket::ServerParser::accept_parsed ()

bool panda::websocket::ServerParser::accepted ()

panda::websocket::ConnectRequestSP panda::websocket::ServerParser::accept (SV* bufsv) {
    const char* CLASS = "Panda::WebSocket::ConnectRequest";
    string buf = sv2string(aTHX_ bufsv);
    PXS_TRY({ RETVAL = THIS->accept(buf); });
    if (!RETVAL) XSRETURN_UNDEF;
}

string panda::websocket::ServerParser::accept_error (SV* res_sv = NULL) {
    PXS_TRY({
        if (!res_sv) RETVAL = THIS->accept_error();
        else {
            if (!sv_isobject(res_sv)) res_sv = xs::call_method_scalar(aTHX_ http_response_class, "new", 3, &res_sv, 1); // from hash params
            RETVAL = THIS->accept_error(typemap_incast<panda::websocket::HTTPResponseSP>(res_sv));
        }
    });
}

string panda::websocket::ServerParser::accept_response (SV* res_sv = NULL) {
    PXS_TRY({
        if (!res_sv) RETVAL = THIS->accept_response();
        else {
            if (!sv_isobject(res_sv)) res_sv = xs::call_method_scalar(aTHX_ connect_response_class, "new", 3, &res_sv, 1); // from hash params
            RETVAL = THIS->accept_response(typemap_incast<panda::websocket::ConnectResponseSP>(res_sv));
        }
    });
}
