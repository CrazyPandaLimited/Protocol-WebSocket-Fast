MODULE = Panda::WebSocket                PACKAGE = Panda::WebSocket::ServerParser
PROTOTYPES: DISABLE

BOOT {
    Stash server_parser_stash("Panda::WebSocket::ServerParser");
    server_parser_stash.mark_as_loaded(main_stash);
    server_parser_stash.inherit(parser_stash);
}

ServerParser* new (SV* CLASS) {
    RETVAL = new ServerParser();
    PROTO = Stash::from_name(CLASS).bless();
}

size_t ServerParser::max_handshake_size (SV* newval = NULL) {
    if (newval) THIS->max_handshake_size = SvUV(newval);
    RETVAL = THIS->max_handshake_size;
}

bool ServerParser::accept_parsed ()

bool ServerParser::accepted ()

ConnectRequestSP ServerParser::accept (string buf) {
    RETVAL = THIS->accept(buf);
}

string ServerParser::accept_error (Scalar res = Scalar()) {
    if (!res) RETVAL = THIS->accept_error();
    else {
        if (!res.is_object_ref()) res = http_response_stash.call("new", res);
        RETVAL = THIS->accept_error(xs::in<HTTPResponseSP>(res));
    }
}

string ServerParser::accept_response (Scalar res = Scalar()) {
    if (!res) RETVAL = THIS->accept_response();
    else {
        if (!res.is_object_ref()) res = connect_response_stash.call("new", res); // from hash params
        RETVAL = THIS->accept_response(xs::in<ConnectResponseSP>(res));
    }
}
