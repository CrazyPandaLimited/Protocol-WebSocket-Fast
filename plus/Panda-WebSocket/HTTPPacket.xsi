MODULE = Panda::WebSocket                PACKAGE = Panda::WebSocket::HTTPPacket
PROTOTYPES: DISABLE

BOOT {
    xs::register_package("Panda::WebSocket::HTTPPacket", "Panda::WebSocket");
}

void panda::websocket::HTTPPacket::init (HV* params) {
    SV** ref;
    if ((ref = hv_fetchs(params, "headers", 0))) http_packet_set_headers(aTHX_ THIS, typemap_incast<HV*>(*ref));
    if ((ref = hv_fetchs(params, "body", 0)))    http_packet_set_body(aTHX_ THIS, *ref);
}

string panda::websocket::HTTPPacket::error () {
    RETVAL = THIS->error;
}

bool panda::websocket::HTTPPacket::header_ok ()

size_t panda::websocket::HTTPPacket::content_length ()

HV* panda::websocket::HTTPPacket::headers (HV* new_headers = NULL) {
    if (new_headers) {
        http_packet_set_headers(aTHX_ THIS, new_headers);
        XSRETURN_UNDEF;
    }
    
    RETVAL = newHV();
    for (const auto& elem : THIS->headers) {
        auto len = elem.first.length();
        char key[len];
        std::transform(elem.first.data(), elem.first.data() + len, key, ::tolower);
        hv_store(RETVAL, key, len, newSVpvn(elem.second.data(), elem.second.length()), 0);
    }
}

string panda::websocket::HTTPPacket::header (string name, SV* val = NULL) {
    if (val) {
        string value = sv2string(aTHX_ val);
        auto it = THIS->headers.find(name);
        if (it == THIS->headers.cend()) {
            name.retain();
            THIS->headers.emplace(name, value);
        }
        else it->second = value;
        XSRETURN_UNDEF;
    }
    
    auto it = THIS->headers.find(name);
    if (it != THIS->headers.cend()) RETVAL = it->second;
    else XSRETURN_UNDEF;
}

SV* panda::websocket::HTTPPacket::body (SV* newval = NULL) {
    if (newval) {
        http_packet_set_body(THIS, newval);
        XSRETURN_UNDEF;
    }
    
    size_t blen = 0;
    for (const auto& s : THIS->body) blen += s.length();
    if (!blen) XSRETURN_UNDEF;
    
    RETVAL = newSV(blen+1);
    SvPOK_on(RETVAL);
    char* dest = SvPVX(RETVAL);
    for (const auto& s : THIS->body) {
        memcpy(dest, s.data(), s.length());
        dest += s.length();
    }
    SvCUR_set(RETVAL, blen);
}

void panda::websocket::HTTPPacket::clear ()

void panda::websocket::HTTPPacket::DESTROY () {}
